// Լաբորատոր աշխատանք 7

//---------------------------------------
// Հարց 1
// Գրել ծրագիր, որը կարտածի [0, 20] միջակայքի զույգ թվերը։ Օգտագործել while ցիկլ։

number=0

while [ $number -le 20 ]
do
    if [ $((number % 2)) -eq 0 ]; then
        echo $number
    fi
    number=$((number + 1))
done

//---------------------------------------
// Հարց 2
// Կատարել 1-ին առաջադրանքը՝ օգտագործելով until ցիկլ։

until [ $number -gt 20 ]
do
    if [ $((number % 2)) -eq 0 ]; then
        echo $number
    fi
    number=$((number + 1))
done

//---------------------------------------
// Հարց 3
// Գրել ծրագիր, որը գտնվում է անվերջ ցիկլի մեջ։ Ցիկլի յուրաքանչյուր իտերացիայում
// արտածել տվյալ ինդեքսի քառակուսին։ Ցիկլը ավարտել այն պահին, երբ արտածվող
// թիվը կգերազանցի 1000։ Օգտագործել while ցիկլ։

index=0

while [ $index -lt 1000 ]
do
	// Արտածենք քառակուսին։
    echo $((index * index))
    // Թիվը մեծացնենք 1-ով։
    ((index++))
    // Եթե թվի քառակուսին մեծ է 1000-ից ապա դուրս գանք ցիկլից։
    if [ $((index * index)) -gt 1000 ]; then
        exit 1
    fi
done

//---------------------------------------
// Հարց 4
// Կատարել 1-ին առաջադրանքը՝ օգտագործելով for ցիկլ։

for (( number=0; number<=20; number++ ))
do
    if [ $((number % 2)) -eq 0 ]; then
        echo $number
    fi
done

//---------------------------------------
// Հարց 5
// Գրել ծրագիր, որը որպես մուտքային տվյալ կստանա ամբողջ թիվ և կարտածի դրա
// կրկնապատիկը։ Ծրագիրը սկսելիս ցուցադրել հետևյալ հաղորդագրությունը․
// Enter an integer number, or enter q to quit:
// Ամբողջ թիվ մուտքագրելուց հետո ցուցադրել դրա կրկնապատիկը, և կրկին ցուցադրել
// հաղորդագրությունը՝ մինչև q տառի սեղմումը։

while true; do
    read -p "Enter an integer number, or enter q to quit: " input
    if [[ $input == q ]]; then
        exit 1
    fi

    if [[ $input =~ ^[0-9]+$ ]]; then
        echo "The double of $input is $((input * 2))"
    else
        echo "Invalid input."
    fi
done

//---------------------------------------
// Հարց 6
// Գրել ծրագիր, որը կստեղծի /home/student դիրեկտորիայի տեքստային ֆայլերի
// անունները պարունակող ֆայլ։ while ցիկլի միջոցով համարակալել այս ֆայլերի
// անունները և արտածել

directory="/home/student" 

if [ -d "$directory" ]; then
	// Փոխենք դիրեկտորիան
    cd "$directory" || exit

    file_with_names="file_names.txt"
    // Ստեխծենք file_names.txt ֆայլը և լրացնենք այն։
    ls > "$file_with_names"

    count=1
    // Կարդանք ֆայլի պարունակությունտ տող առ տող։
    while IFS= read -r line; do
        echo "$count. $line"
        ((count++))
    done < "$file_with_names"
fi

//---------------------------------------
// Հարց 7
// Գրել ծրագիր, որը for ցիկլի միջոցով կարտածի [0, 30] միջակայքում գտնվող 3-ի բազմապատիկ թվերը։

// 3, 6, 9 և այլն։
for ((i=3; i<=30; i+=3))
do
    echo $i
done

//---------------------------------------
// Հարց 8
// Գրել ծրագիր, որը for ցիկլի միջոցով կարտածի ընթացիկ դիրեկտորիայի բոլոր
// տեքստային ֆայլերի անունները։

for file in *.txt; do
    echo "$file"
done

//---------------------------------------
// Հարց 9
// Գրել ծրագիր, որը որպես արգումենտ կստանա ֆայլերի անուններ, և այդ ֆայլերից
// յուրաքանչյուրի համար կարտածի ֆայլի ամենակարճ բառը և դրա երկարությունը։

for filename in "$@"; do
    echo "File: $filename"

    shortest_word=""
    shortest_length=999999

    while read -r word; do
        length=${#word}
        if [ "$length" -lt "$shortest_length" ]; then
            shortest_word="$word"
            shortest_length="$length"
        fi
    done < "$filename"

    echo "Shortest word: $shortest_word"
    echo "Length: $shortest_length"
done

//---------------------------------------
// Հարց 10
// Գրել ծրագիր, որը որպես արգումենտներ կստանա ֆայլերի անուններ, և դրանցից
// յուրաքանչյուրի համար կստուգի, թե արդյո՞ք տվյալ ֆայլը գոյություն ունի, թե ոչ։
// Գոյություն ունենալու դեպքում ստուգել, թե արդյո՞ք ֆայլն ունի կարդալու
// թույլտվություն։ Արտածել համապատասխան հաղորդագրություններ

for file in "$@"; do
	// Ստուգենք, ֆայլը գոյություն ունի թե ոչ։
    if [ -e "$file" ]; then  
        echo "$file exists."
        // Ստուգենք կարդալու թույլտվությունը։
        if [ -r "$file" ]; then
            echo "$file is readable."
        else
            echo "$file is not readable."
        fi
    else
        echo "$file does not exist."
    fi
done