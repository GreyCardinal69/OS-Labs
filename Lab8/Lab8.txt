// Լաբորատոր աշխատանք 8

//---------------------------------------
// Հարց 1
// Գրել ծրագիր, որը ինտերակտիվ ռեժիմում կստանա [0, 3] միջակայքի որևէ թիվ, և
// արգումենտի արժեքից կախված կկատարի հետևյալ գործողությունները․
// 0 – ավարտել ծրագիրը։
// 1 – արտածել /home/student դիրեկտորիայի ֆայլերի ցուցակը։
// 2 – արտածել /home/student դիրեկտորիայի տեքստային ֆայլերի քանակը։
// 3 – արտածել աշխատանքային դիրեկտորիան։
Գ// ործողությունները կրկնել մինչև 0 արժեքի ներմուծումը։ Օգտագործել case օպերատոր։

while true; do
    read -p "Enter number. " number
    
    case $number in
        0)
            echo "Exiting the program."
            break
            ;;
        1)
            ls /home/student
            ;;
        2)	
			// find /home/student -type f-ը Գտնում է դիրեկտորիայի ֆայլերը
			// wc -l -ը հաշվում է տողերի քանակը։
            find /home/student -type f | wc -l
            ;;
        3)
            echo "Working directory: /home/student"
            ls -l /home/student
            ;;
        *)
            echo "Invalid input."
            ;;
    esac
done

//---------------------------------------
// Հարց 2
// Գրել ծրագիր, որը որպես արգումենտ կստանա տարվա ամսի անունը և կվերադարձնի
// տվյալ ամսում առկա օրերի քանակը։ Օգտագործել case օպերատոր։

read -p "Enter month: " month

case $month in
    January|March|May|July|August|October|December)
        echo "31 Days."
        ;;
    April|June|September|November)
        echo "30 Days."
        ;;
    February)
        echo "28 or 29 days."
        ;;
    *)
        echo "Invalid month."
        ;;
esac

//---------------------------------------
// Հարց 3
// Գրել <<Հաշվիչ>> ծրագիր, որը կստանա ճիշտ 3 արժեք հետևյալ հաջորդականությամբ․
// թիվ, գործողություն, թիվ։ Օր՝ 2 + 3։ Արժեքները ներմուծել ինտերակտիվ ռեժիմում (read
// հրամանի միջոցով)։ Գործողության համար սահմանել հետևյալ ընդունելի արժեքները․ + -
// * / **։ Արտածել գործողության արդյունքը։ Գործողության տիպը որոշելու համար
// օգտագործել case օպերատոր։

read -p "Enter inputs: " num1 operator num2

case $operator in
    +|-|*|/|**)
        result=$(awk "BEGIN { printf $num1 $operator $num2 }")
        echo "Result: $result"
        ;;
    *)
        echo "Invalid operator."
        ;;
esac

//---------------------------------------
// Հարց 4
// Գրել ծրագիր, որը որպես հրամանային տողի արգումենտ կստանա ֆայլի անուն։ Եթե
// ֆայլը գոյություն ունի և ունի կարդալու թույլտվություն, ապա արտածել ֆայլի
// պարունակությունը, հակառակ դեպքում արտածել համապատասխան
// հաղորդագրություն։

file_name = $1

// -e ( exists ), -r ( read )
if [ -e "$file_name" ] && [ -r "$file_name" ]; then
    cat "$file_name"
else
    echo "File doesnt exist."
fi

//---------------------------------------
// Հարց 5
// Գրել cp ծրագրի պատճենը՝ առանց cp հրամանից օգտվելու։ Ծրագիրը պետք է որպես
// արգումենտներ ստանա 2 ֆայլերի անուններ, և պատճենի առաջին ֆայլի
// պարունակությունը 2-րդի մեջ։ Իրականացնել ծրագրի պատշաճ աշխատանքի համար
// հարկավոր ստուգումներ (ֆայլը գոյություն ունի, ունի կարդալու թույլտվություն)։

file1=$1
file2=$2

// Առաջին և երկրորդ ֆայլերը կան և առաջին ֆայլը ունի կարդալու թույլտվություն
if [ -e "$file1" ] && [ -e "$file2" ] && [ -r "$file1" ]; then
    cp "$file1" "$file2"
else
    echo "Invalid inputs."
fi

//---------------------------------------
// Հարց 6
// Գրել ծրագիր, որը որպես հրամանային տողի արգումենտներ կստանա 2 թիվ և կարտածի
// այդ թվերի գումարը։ Իրականացնել արժեքների վավերացում։

num1 = $1
num2 = $2

if ! [[ $num1 =~ ^[0-9]+$ ]] || ! [[ $num2 =~ ^[0-9]+$ ]]; then
    echo "Wrong Inputs."
    exit 1
fi

sum = $((num1 + num2))
echo "Sum: $sum"

//---------------------------------------
// Հարց 7
// Գրել ծրագիր, որը որպես հրամանային տողի արգումենտներ կստանա կամայական
// քանակով արժեքներ և նույնությամբ կարտածի այդ արժեքները։ Օգտագործել while ցիկլ
// և shift օպերատոր

while [ $# -gt 0 ]; do
    echo "$1"
    shift
done

//---------------------------------------
// Հարց 8
// Իրականացնել 7-րդ կետը՝ օգտագործելով for ցիկլ և $@ հատուկ փոփոխականը

for arg in "$@"; do
    echo "$arg"
done

//---------------------------------------
// Հարց 9
// Գրել ծրագիր, որը որպես հրամանային տողի արգումենտներ կստանա կամայական
// քանակով թվեր և կարտածի այդ թվերի գումարը


sum = 0

for num in "$@"; do
    sum = $((sum + num))
done

echo "Sum: $sum"

//---------------------------------------
// Հարց 10
// Գրել ծրագիր, որը որպես հրամանային տողի արգումենտներ կստանա կամայական
// քանակով թվեր և կարտածի զույգ թվերի քանակը։

count = 0

for num in "$@"; do
    if ((num % 2 == 0)); then
        ((count++))
    fi
done

echo "Count: $count"